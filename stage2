#!/bin/sh

set -eu

root_mount=$1
root_type=$2
grub_device=$3
digitalocean=$4
digitalocean_eth_configs=""

if [ "$digitalocean" == "true" ];
then
  # TODO: log here
  digitalocean_eth_configs="
    networking.interfaces.eth0.useDHCP = false;
    networking.interfaces.eth1.useDHCP = false;
  "
fi

## Enable host resolution
cp /etc/{external-,}resolv.conf

## Install dependencies; it's easier to do this here, in the Nix chroot,
## since we don't rely on the host system.
nix-env -i pcre

## Generate a base config
nixos-generate-config --root /nixos

cat <<EOF > /nixos/etc/nixos/configuration-additions.nix
  boot.kernelParams = ["boot.shell_on_fail"];
  boot.loader.grub.device = "$grub_device";
  boot.loader.grub.storePath = "/nixos/nix/store";
  boot.initrd.supportedFilesystems = [ "$root_type" ];
  boot.initrd.postDeviceCommands = ''
    mkdir -p /mnt-root/old-root ;
    mount -t $root_type $root_mount /mnt-root/old-root ;
  '';
  fileSystems = {
    "/" = {
      device = "/old-root/nixos";
      fsType = "none";
      "options" = "bind";
    };
    "/old-root" = {
      device = "$root_mount";
      fsType = "$root_type";
    };
  };
  $digitalocean_eth_configs
}
EOF

## Add in our configuration additions
nixos_dir=/nixos/etc/nixos
mv $nixos_dir/{,backup-}configuration.nix
head --lines=-1 $nixos_dir/backup-configuration.nix > $nixos_dir/configuration.nix
cat $nixos_dir/configuration-additions.nix >> $nixos_dir/configuration.nix

## Remove the automatically-generated fileSystems configuration
mv $nixos_dir/{,backup-}hardware-configuration.nix
pcregrep -Mv "fileSystems.\"/\"[\s\S]*};" $nixos_dir/backup-hardware-configuration.nix > $nixos_dir/hardware-configuration.nix

## Installs grub and a base NixOS system; after a reboot, we're golden
nixos-install --root /nixos
exit
